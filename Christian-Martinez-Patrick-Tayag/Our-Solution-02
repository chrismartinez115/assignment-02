/* ----------------------------------------------------------------------------
 * Copyright &copy; 2016 Patrick Tayag and Christian Martinez 
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */
//ALL FILES PASTED.
/**
 * Implements `buffer.h`.
 */

// TODO: `#include`s for system headers, if necessary
#include <iostream>
#include "buffer.h"


// TODO: `#include`s for other local headers, if necessary

// ----------------------------------------------------------------------------

// TODO: implementations for all functions in `class Buffer`
Buffer::Buffer(unsigned int size_x, unsigned int size_y) : size_x(size_x), size_y(size_y) {
	data_ = new char[size_x * size_y];
	for (int i = 0; i < size_x * size_y; i++)
		data_[i] = ' ';

	
}
/**
* The constructor.
*
* Must initialize `size_x` and `size_y`, and allocate memory for (and
* initialize) `data_`.
*
* Notes:
* - Since `size_x` and `size_y` are constant, they must be initialized
*   in the initialization list, rather than set in the constructor
*   body.
* - You may assume that the dynamic memory allocation succeeds.
*/

Buffer::~Buffer() {
	delete[] data_;
}
/**
* The destructor.
*
* Must free the memory that the constructor allocated to `data_`.
*/


char Buffer::get(unsigned int x, unsigned int y) const {
	
	if (x < 0 && y < 0) { //out of bounds?
		std::cerr << "\n" << "ERROR: Buffer::get : index out of bounds\n" << "\n";
		std::exit(1);
	}
	return data_[y * size_x + x];
}
/**
* Return the character at `data_[ y * size_x + x ]`.
*
* If `x` or `y` is out of bounds, should write
* ```
* "ERROR: `Buffer::get`: index out of bounds\n"
* ```
* to `cerr` and `exit(1)`.
*/

void Buffer::set(unsigned int x, unsigned int y, char c) {

	if (x < 0 && y < 0) {// out of bounds?
		std::cerr << "\n" << "ERROR: Buffer::set : index out of bounds\n" << "\n";
		std::exit(1);
	}
	data_[y * size_x + x] = c;
}
/**
* Set the character at `data_[ y * size_x + x ]` to `c`.
*
* If `x` or `y` is out of bounds, should write
* ```
* "ERROR: `Buffer::set`: index out of bounds\n"
* ```
* to `cerr` and `exit(1)`.
*/

void Buffer::set(unsigned int pos_x, unsigned int pos_y, std::string s) {
	for (int i = 0, x = pos_x, y = pos_y; i < s.length(); i++) {
		if (s[i] == '\n') {
			y++;
			x = pos_x;
		}
		else {
			set(x++, y, s[i]);
		}
	}
}
/**
* Overlay `s` onto `data_`.
*
* For example, if this buffer is representing an array that looks like
* ```
* *******
* *******
* *******
* *******
* *******
* ```
* and we call `set(1, 2, "hello\nworld")`, the buffer's contents
* should now be
* ```
* *******
* *******
* *hello*
* *world*
* *******
* ```
*
* Notes:
* - This function may call the other `set` (which takes a `char` as
*   its last argument), if you like.  In that case, you may leave the
*   index error checking to the other `set`.  Otherwise, you should
*   have checks in this function to make sure you're not putting
*   characters where they don't belong.
* - This function will be useful when implementing the `Shape` class.
* - If you can't think of a way to do this, see
*   `hint--implementation-of-Buffer-set.md`.
*/


void Buffer::draw() const {
	for (int i = 0; i < size_x * size_y; i++)
		std::cout << data_[i];
}
/**
* Output the contents of the buffer to `cout`.
*/


void Buffer::clear() {
	for (int i = 0; i < size_x * size_y; i++)
	data_[i] = ' ';
}
/**
* Set each element `data_` to ' '.
*/


/* ----------------------------------------------------------------------------
 * Copyright &copy; 2016 Ben Blazak <bblazak@fullerton.edu>
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */

/**
 * Class implementing an arbitrarily sized 2D character buffer, in which we may
 * draw before outputting the information to the terminal.
 *
 * This way, we don't have to draw characters in order from left to right, then
 * top to bottom.
 *
 * Notes:
 * - We use `exit(1)` here for errors.  Later, we'll go over exceptions, which
 *   would be a much better solution.
 */

#ifndef BUFFER_H
#define BUFFER_H
// ----------------------------------------------------------------------------

#include <string>

// ----------------------------------------------------------------------------

class Buffer {
    private:
        char * data_;
        /**
         * Our character data.
         *
         * Since we don't know how big the array will be, we can't use a
         * regular (stack allocated) array.  In the constructor, this will be
         * initialized to a 1D array large enough to hold all the values, and
         * we will emulate using it as a 2D array by taking the index as
         * ```
         * data_[ y * size_x + x ];
         * ```
         * (where, if it were a real 2D array, we could have said
         * `data_[y][x]`).
         */

    public:
        const unsigned int size_x;
        /**
         * The number of "columns" (x values) in `data_`.
         */

        const unsigned int size_y;
        /**
         * The number of "rows" (y values) in `data_`.
         */


        Buffer(unsigned int size_x, unsigned int size_y);
        /**
         * The constructor.
         *
         * Must initialize `size_x` and `size_y`, and allocate memory for (and
         * initialize) `data_`.
         *
         * Notes:
         * - Since `size_x` and `size_y` are constant, they must be initialized
         *   in the initialization list, rather than set in the constructor
         *   body.
         * - You may assume that the dynamic memory allocation succeeds.
         */

        ~Buffer();
        /**
         * The destructor.
         *
         * Must free the memory that the constructor allocated to `data_`.
         */


        char get(unsigned int x, unsigned int y) const;
        /**
         * Return the character at `data_[ y * size_x + x ]`.
         *
         * If `x` or `y` is out of bounds, should write
         * ```
         * "ERROR: `Buffer::get`: index out of bounds\n"
         * ```
         * to `cerr` and `exit(1)`.
         */

        void set(unsigned int x, unsigned int y, char c);
        /**
         * Set the character at `data_[ y * size_x + x ]` to `c`.
         *
         * If `x` or `y` is out of bounds, should write
         * ```
         * "ERROR: `Buffer::set`: index out of bounds\n"
         * ```
         * to `cerr` and `exit(1)`.
         */

        void set(unsigned int pos_x, unsigned int pos_y, std::string s);
        /**
         * Overlay `s` onto `data_`.
         *
         * For example, if this buffer is representing an array that looks like
         * ```
         * *******
         * *******
         * *******
         * *******
         * *******
         * ```
         * and we call `set(1, 2, "hello\nworld")`, the buffer's contents
         * should now be
         * ```
         * *******
         * *******
         * *hello*
         * *world*
         * *******
         * ```
         *
         * Notes:
         * - This function may call the other `set` (which takes a `char` as
         *   its last argument), if you like.  In that case, you may leave the
         *   index error checking to the other `set`.  Otherwise, you should
         *   have checks in this function to make sure you're not putting
         *   characters where they don't belong.
         * - This function will be useful when implementing the `Shape` class.
         * - If you can't think of a way to do this, see
         *   `hint--implementation-of-Buffer-set.md`.
         */


        void draw() const;
        /**
         * Output the contents of the buffer to `cout`.
         */


        void clear();
        /**
         * Set each element `data_` to ' '.
         */
};

// ----------------------------------------------------------------------------
#endif


/* ----------------------------------------------------------------------------
 * Copyright &copy; 2016 Ben Blazak <bblazak@fullerton.edu>
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */

/**
 * Global constants.
 *
 *
 * Notes:
 * - These could also be declared static, but namespaces are the more C++ way
 *   of doing things.  The goal here is to make it so that if these identifiers
 *   end up in more than one translation unit, linking doesn't fail due to
 *   their redefinition.
 */

#ifndef CONSTANTS_H
#define CONSTANTS_H
// ----------------------------------------------------------------------------

/**
 * Notes:
 * - If you like, you can start reading about what this "unnamed `namespace`"
 *   is for [here](http://www.comeaucomputing.com/techtalk/#nostatic).
 */
namespace {

    const unsigned int TERM_SIZE_X = 80;
    /**
     * The width of the terminal window, in characters.
     */

    const unsigned int TERM_SIZE_Y = 25;
    /**
     * The height of the terminal window, in characters.
     */


    const double RATIO_FILLED = 0.40;
    /**
     * How much of the neighborhood should be filled with shapes?
     */


    const double RATIO_ALIKE_HAPPY = 1 / 2.0;
    /**
     * "I'll move if my neighbors aren't at least this much like me"
     */

    const double RATIO_DIFFERENT_HAPPY = 1 / 5.0;
    /**
     * "I'll move if my neighbors aren't at least this much different than me"
     */

}

// ----------------------------------------------------------------------------
#endif


/* ----------------------------------------------------------------------------
 * Copyright &copy; 2016 Ben Blazak <bblazak@fullerton.edu>
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */

/**
 * Tying everything together.
 *
 * Notes:
 * - We also include our test functions here, since there aren't that many.
 */

#include "constants.h"
#include "neighborhood.h"
#include "shape.h"

// ----------------------------------------------------------------------------
// test functions

/**
 * Test the `Buffer` object by creating one, drawing a few things on it, and
 * then rendering it to the screen.
 */
void test_buffer() {
    Buffer b(TERM_SIZE_X, TERM_SIZE_Y);

    // draw ellipse
    for (int y=0; y < b.size_y; y++)
        for (int x=0; x < b.size_x; x++)
            if ( (x-40)*(x-40) + (y-10)*(y-10) == 50)
                b.set(x, y, '*');

    // draw boarder
    for (int y=0; y < b.size_y; y++) {
        b.set(0, y, '|');
        b.set(b.size_x-1, y, '|');
    }
    for (int x=0; x < b.size_x; x++) {
        b.set(x, 0, '-');
        b.set(x, b.size_y-1, '-');
    }

    // render to screen
    b.draw();
}

/**
 * Test the `Shape` object by creating one of each type (besides "empty"), and
 * tiling them on a buffer.
 */
void test_shape() {
    Buffer b(TERM_SIZE_X, TERM_SIZE_Y);

    Shape triangle("triangle");
    Shape square("square");

    // draw shapes
    for (int y = 0; y <= b.size_y - Shape::size_y; y += Shape::size_y) {
        for (int x = 0; x <= b.size_x - Shape::size_x*2; x += Shape::size_x*2) {
            triangle.drawToBuffer(b, x + Shape::size_x*((y+0)%2), y);
            square.drawToBuffer(b, x + Shape::size_x*((y+1)%2), y);
        }
    }

    // render to screen
    b.draw();
}

// ----------------------------------------------------------------------------

/**
 * Notes:
 * - Comment out the parts you aren't currently using.
 */
int main() {
//     test_buffer();

    // ------------------------------------------------------------------------

//     test_shape();

    // ------------------------------------------------------------------------

    // animate  neighborhood
    unsigned int size_x = TERM_SIZE_X/Shape::size_x;
    unsigned int size_y = TERM_SIZE_Y/Shape::size_y;
    Neighborhood(size_x, size_y).animate(1000);

    // ------------------------------------------------------------------------

    return 0;  // success
}


/* ----------------------------------------------------------------------------
 * Copyright &copy; 2016 YOUR_NAME <YOUR_EMAIL>
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */

/**
 * Implements of `neighborhood.h`.
 */

#include <random>
#include <iostream>
// TODO: `#include`s for other system headers, if necessary

#include "neighborhood.h"
#include "constants.h"
#include "buffer.h"

// TODO: `#include`s for other local headers, if necessary

// ----------------------------------------------------------------------------
// local helper functions

/**
 * Notes:
 * - If you like, you can start reading about what this "unnamed `namespace`"
 *   is for [here](http://www.comeaucomputing.com/techtalk/#nostatic).
 */
namespace {

    /**
     * Return a uniformly distributed random number in the range [low, high]
     * using the Mersenne Twister engine, seeded with (ideally) the hardware
     * random device.
     *
     * Because `rand()` (and especially `rand() % ...`) maybe shouldn't be
     * used, if we can avoid it:
     * [`rand()` considered harmful]
     * (https://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful)
     * (talk by stephan t. lavavej)
     * 
     *
     * Notes:
     * - In C++, `static` function variables are created and initialized once,
     *   when the function is first called, and they remain until the program
     *   is terminated: 
     *   [Static variables in class methods]
     *   (http://stackoverflow.com/questions/6223355/static-variables-in-class-methods)
     * - `std::mt19937` objects are expensive to create.
     *   `std::uniform_int_distribution` objects are said to be pretty cheap.
     */
    unsigned int mtrand(unsigned int low, unsigned int high) {
        static std::random_device rd;
        static std::mt19937 mt(rd());  // engine (mersenne twister)

        return std::uniform_int_distribution<unsigned int>(low, high)(mt);
    }

}

// ----------------------------------------------------------------------------

// TODO: implementations for all functions in `class Neighborhood`




Neighborhood::Neighborhood(unsigned int size_x, unsigned int size_y) : size_x(size_x), size_y(size_y) {
	neighborhood_ = new Shape[size_x * size_y]();

	for (int i = 0; i < size_x*size_y*RATIO_FILLED;) {
		unsigned int x = mtrand(0, size_x - 1);
		unsigned int y = mtrand(0, size_y - 1);
		if (this->get(x, y).getType() == "empty") {
			this->set(x, y, mtrand(0, 1) ? Shape("triangle") : Shape("square"));

			i++;
		}
	}
}
	/**
	* The constructor.
	*
	* Must initialize `size_x` and `size_y`.
	*
	* Must also allocate memory for `neighborhood_`, initialize it to
	* contain all "empty" `Shape`s, and then fill it with non-empty shapes
	* so that the ratio of non-empty to empty shapes is `RATIO_FILLED`
	* (from `constants.h`).
	*
	* Notes:
	* - Since `size_x` and `size_y` are constant, they must be initialized
	*   in the initialization list, rather than set in the constructor
	*   body.
	* - You may assume that the dynamic memory allocation succeeds.
	*/

Neighborhood::~Neighborhood() {
	delete[] neighborhood_;
}
	/**
	* The destructor.
	*
	* Must free the memory that the constructor allocated to
	* `neighborhood_`.
	*/


Shape Neighborhood::get(unsigned int x, unsigned int y) const {
	return Neighborhood::neighborhood_[y * size_x + x];
	if (x < 0 && y < 0) { //out of bounds?
		std::cerr << "\n" << "ERROR: Neighborhood::get : index out of bounds\n" << "\n";
		std::exit(1);
	}

}
	/**
	* Return the `Shape` at `neighborhood_[ y * size_x + x ]`.
	*
	* If `x` or `y` is out of bounds, should write
	* ```
	* "ERROR: `Neighborhood::get`: index out of bounds\n"
	* ```
	* to `cerr` and `exit(1)`.
	*/

void Neighborhood::set(unsigned int x, unsigned int y, const Shape & s) {
	neighborhood_[y*size_x + x] = s;
	if (x < 0 && y < 0) { //out of bounds?
		std::cerr << "\n" << "ERROR: Neighborhood::get : index out of bounds\n" << "\n";
		std::exit(1);
	}
}
	/**
	* Set the `Shape` at `neighborhood_[ y * size_x + x ]` to `s`.
	*
	* If `x` or `y` is out of bounds, should write
	* ```
	* "ERROR: `Neighborhood::set`: index out of bounds\n"
	* ```
	* to `cerr` and `exit(1)`.
	*/


void Neighborhood::move(unsigned int old_x, unsigned int old_y) {
	for (;;) {
		unsigned int x = mtrand(0, size_x - 1);
		unsigned int y = mtrand(0, size_y - 1);

		if (get(x, y).getType() == "empty") {
			set(x, y, get(old_x, old_y));
			set(old_x, old_y, Shape("empty"));
			break;
		}
	}

}
	/**
	* Move the shape at index `old_x, old_y` to a random empty location in
	* the neighborhood.
	*/


void Neighborhood::animate(unsigned int frames) {
	// sadface
}
/**
	* 1. Create a buffer.
	* 2. Draw all the shapes in our neighborhood to it, and render it to
	*    the screen.
	* 3. Move all the unhappy shapes, and go back to step (2).
	*
	* Loop from step (3) to step (2) `frames` times; that is, the
	* neighborhood should be rendered to the screen (i.e. output to the
	* terminal) `frames` times.
	*
	* To make it so that each frame can be seen, you should have the
	* program sleep for a little while (probably at least 100
	* milliseconds) at the end of each loop.  To do this, include the
	* `<chrono>` and `<thread>` headers, and use the following code:
	* ```
	* std::this_thread::sleep_for(std::chrono::milliseconds(100));
	* ```
	*/

}
	
	/* ----------------------------------------------------------------------------
 * Copyright &copy; 2016 Ben Blazak <bblazak@fullerton.edu>
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */

/**
 * Class representing a neighborhood (represented as an array) of `Shape`s.
 *
 * Notes:
 * - We use `exit(1)` here for errors.  Later, we'll go over exceptions, which
 *   would be a much better solution.
 */


#ifndef NEIGHBORHOOD_H
#define NEIGHBORHOOD_H
// ----------------------------------------------------------------------------

#include "shape.h"

// ----------------------------------------------------------------------------

class Shape;
/**
 * Forward declare `Shape`, in case this file gets included first.
 *
 * This is definitely not the cleanest way to do things; but it seems to me
 * right now to be the simplest.
 */

// ----------------------------------------------------------------------------

class Neighborhood {
    private:
        Shape * neighborhood_;
        /**
         * The place where we'll store our 2D array of `Shape`s.
         *
         * Since we don't know how big the array will be, we can't use a
         * regular (stack allocated) array.  In the constructor, this will be
         * initialized to a 1D array large enough to hold all the values, and
         * we will emulate using it as a 2D array by taking the index as
         * ```
         * neighborhood_[ y * size_x + x ];
         * ```
         * (where, if it were a real 2D array, we could have said
         * `neighborhood_[y][x]`).
         */

    public:
        const unsigned int size_x;
        /**
         * The number of "columns" (x values) in `neighborhood_`.
         */

        const unsigned int size_y;
        /**
         * The number of "rows" (y values) in `neighborhood_`.
         */

        Neighborhood(unsigned int size_x, unsigned int size_y);
        /**
         * The constructor.
         *
         * Must initialize `size_x` and `size_y`.
         *
         * Must also allocate memory for `neighborhood_`, initialize it to
         * contain all "empty" `Shape`s, and then fill it with non-empty shapes
         * so that the ratio of non-empty to empty shapes is `RATIO_FILLED`
         * (from `constants.h`).
         *
         * Notes:
         * - Since `size_x` and `size_y` are constant, they must be initialized
         *   in the initialization list, rather than set in the constructor
         *   body.
         * - You may assume that the dynamic memory allocation succeeds.
         */

        ~Neighborhood();
        /**
         * The destructor.
         *
         * Must free the memory that the constructor allocated to
         * `neighborhood_`.
         */


        Shape get(unsigned int x, unsigned int y) const;
        /**
         * Return the `Shape` at `neighborhood_[ y * size_x + x ]`.
         *
         * If `x` or `y` is out of bounds, should write
         * ```
         * "ERROR: `Neighborhood::get`: index out of bounds\n"
         * ```
         * to `cerr` and `exit(1)`.
         */

        void set(unsigned int x, unsigned int y, const Shape & s);
        /**
         * Set the `Shape` at `neighborhood_[ y * size_x + x ]` to `s`.
         *
         * If `x` or `y` is out of bounds, should write
         * ```
         * "ERROR: `Neighborhood::set`: index out of bounds\n"
         * ```
         * to `cerr` and `exit(1)`.
         */


        void move(unsigned int old_x, unsigned int old_y);
        /**
         * Move the shape at index `old_x, old_y` to a random empty location in
         * the neighborhood.
         */


        void animate(unsigned int frames);
        /**
         * 1. Create a buffer.
         * 2. Draw all the shapes in our neighborhood to it, and render it to
         *    the screen.
         * 3. Move all the unhappy shapes, and go back to step (2).
         *
         * Loop from step (3) to step (2) `frames` times; that is, the
         * neighborhood should be rendered to the screen (i.e. output to the
         * terminal) `frames` times.
         *
         * To make it so that each frame can be seen, you should have the
         * program sleep for a little while (probably at least 100
         * milliseconds) at the end of each loop.  To do this, include the
         * `<chrono>` and `<thread>` headers, and use the following code:
         * ```
         * std::this_thread::sleep_for(std::chrono::milliseconds(100));
         * ```
         */
};

// ----------------------------------------------------------------------------
#endif


/* ----------------------------------------------------------------------------
 * Copyright &copy; 2016 YOUR_NAME <YOUR_EMAIL>
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */

/**
 * Implements `shape.h`.
 */

// TODO: `#include`s for system headers, if necessary

#include "shape.h"
#include "buffer.h"
#include "neighborhood.h"
#include <iostream>
#include <string>

// TODO: `#include`s for other local headers, if necessary
#include "constants.h"

// ----------------------------------------------------------------------------

// TODO: implementations for all functions in `class Buffer`




Shape::Shape(const std::string & type) : type_(type), type_art_("empty") {

	setType(type);
}
/**
* The constructor.
*
* Must initialize `type_`, and `type_art_`.
*
* Notes:
* - I suggest calling `setType` in the body of the constructor, to
*   avoid duplicating code.
*/




Shape::~Shape() = default;
	/**
	* The destructor.
	*
	* Since there's no dynamically allocated memory to `delete`, this may
	* be left out, or it may be implemented with
	* ```
	* Shape::~Shape() = default;
	* ```
	* (valid since C++ 11).
	*/


std::string Shape::getType() {
	return type_;
}
	/**
	* Return `type_`.
	*/

void Shape::setType(const std::string & type) {
	type_ = type;
	type_art_ = "empty";
	if (type != " ") {
		std::cerr << "ERROR: Shape::setType : invalid type\n";
		std::exit(1);
	}

}
	/**
	* Set `type_` to `type`, and set `type_art_` to the appropriate value.
	*
	* If the passed `type` is not valid, write
	* ```
	* "ERROR: `Shape::setType`: invalid type\n"
	* ```
	* to `cerr` and `exit(1)`.
	*/


void Shape::drawToBuffer(Buffer & b, unsigned int x, unsigned int y) const {
	void set(unsigned int, unsigned int, std::string);
}
	/**
	* Draw `type_art_` onto the `Buffer` at position `x, y`.
	*
	* Notes:
	* - This (primarily) is what
	*   ```
	*   void Buffer::set(unsigned int, unsigned int, std::string);
	*   ```
	*   is for.
	*/


	bool Shape::isHappy(const Neighborhood & n,
		unsigned int pos_x,
		unsigned int pos_y) const {
		if (n.get(pos_x, pos_y).getType() == "empty")
			return true;

		 int x_min = (pos_x == 0) ? pos_x : pos_x - 1;
		 int y_min = (pos_y == 0) ? pos_y : pos_y - 1;

		 int x_max = (pos_x == n.size_x - 1) ? pos_x : pos_x + 1;
		int y_max = (pos_y == n.size_y - 1) ? pos_y : pos_y + 1;

		double alike = 0;
		double different = 0;

		for (int x = x_min; x <= x_max; x++) {
			for (int y = y_min; y <= y_max; y++) {
				if (x == pos_x && y == pos_y)
					continue;
				else if (n.get(x, y).getType() == "empty")
					continue;
				else if (n.get(x, y).getType() == n.get(pos_x, pos_y).getType())
					alike++;
				else
					different++;
			}
		}
		return (different || alike) 
			&& (different == 0 || (alike / different) >= RATIO_ALIKE_HAPPY )
			&& (alike == 0 || (different / alike) >= RATIO_DIFFERENT_HAPPY );
	}
	/**
	* Return `true` if the shape is happy (i.e. not willing to move), and
	* `false` otherwise.
	*
	* - More specifically, return `true` if and only if the shape
	*     - has more than 0 "triangle" or "square" neighbors
	*     - and the ratio of like neighbors to unlike (different)
	*       neighbors is greater than or equal to `RATIO_ALIKE_HAPPY`
	*       (from `constants.h`)
	*     - and the ratio of unlike (different) neighbors to like
	*       neighbors is greater than or equal to `RATIO_DIFFERENT_HAPPY`
	*       (from `constants.h`)
	*
	* Notes:
	* - Use `n.get(...).getType() == "..."` to determine the type of the
	*   `Shape` at a given position.
	* - Be careful not to look for neighbors outside the bounds of the
	*   `Neighborhood`.
	* - Be careful not to have a shape count itself, when trying to count
	*   its neighbors.
	* - Be careful not to count "empty" shapes as unlike (different)
	*   shapes ("empty" shapes should not count as either like or
	*   unlike).
	* - Be careful of possible division by 0 when testing the ratios of
	*   like and unlike shapes.
	*/


// ----------------------------------------------------------------------------





/* ----------------------------------------------------------------------------
 * Copyright &copy; 2016 Ben Blazak <bblazak@fullerton.edu>
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */

/**
 * Class representing a shape (triangle or square) with biases about what kinds
 * of shapes it wants for neighbors.
 */

#ifndef SHAPE_H
#define SHAPE_H
// ----------------------------------------------------------------------------

#include <string>

#include "buffer.h"
#include "neighborhood.h"

// ----------------------------------------------------------------------------

class Neighborhood;
/**
 * Forward declare `Neighborhood`, in case this file gets included first.
 *
 * This is definitely not the cleanest way to do things; but it seems to me
 * right now to be the simplest.
 */

// ----------------------------------------------------------------------------

class Shape {
    private:
        std::string type_;
        /**
         * A string representing the "type" of the `Shape` (either "empty",
         * "triangle", or "square").
         *
         * Notes:
         * - It would be more "object oriented" to have separate `Empty`,
         *   `Triangle`, and `Square` types derived from this class.  But I
         *   decided that the complexity that introduced to the design wasn't
         *   worth it for this project.  Also, it's nice to try this method
         *   out, since it is a completely valid way to do things, and
         *   sometimes it turns out to be the best.  And don't worry: we'll get
         *   plenty of practice with inheritance later on.
         */

        std::string type_art_;
        /**
         * The ASCII art representing the type in `type_`.
         *
         * This should be set along with `type_` by the `setType` member
         * function.
         *
         * You may make your own ASCII art for each type, or you may use
         * - empty
         *   ```
         *   "     \n"
         *   "     \n"
         *   "     \n"
         *   ```
         * - triangle
         *   ```
         *   "  ,  \n" 
         *   " / \\ \n"
         *   "/___\\\n"
         *   ```
         * - square
         *   ```
         *   ".---.\n"
         *   "|   |\n"
         *   "'---'\n"
         *   ```
         *
         * Make sure that the number of rows and columns is the same for each
         * shape, and that it matches `size_x` (for columns) and `size_y` (for
         * rows).
         */


    public:
        static const unsigned int size_x = 5;  // must match actual size
        /**
         * The number of columns (x values) in each ASCII art shape (each
         * possible value of `type_art_`).
         */

        static const unsigned int size_y = 3;  // must match actual size
        /**
         * The number of rows (y values) in each ASCII art shape (each possible
         * value of `type_art_`).
         */


        Shape(const std::string & type="empty");
        /**
         * The constructor.
         *
         * Must initialize `type_`, and `type_art_`.
         *
         * Notes:
         * - I suggest calling `setType` in the body of the constructor, to
         *   avoid duplicating code.
         */

        ~Shape();
        /**
         * The destructor.
         *
         * Since there's no dynamically allocated memory to `delete`, this may
         * be left out, or it may be implemented with
         * ```
         * Shape::~Shape() = default;
         * ```
         * (valid since C++ 11).
         */


        std::string getType();
        /**
         * Return `type_`.
         */

        void setType(const std::string & type);
        /**
         * Set `type_` to `type`, and set `type_art_` to the appropriate value.
         *
         * If the passed `type` is not valid, write
         * ```
         * "ERROR: `Shape::setType`: invalid type\n"
         * ```
         * to `cerr` and `exit(1)`.
         */


        void drawToBuffer(Buffer & b, unsigned int x, unsigned int y) const;
        /**
         * Draw `type_art_` onto the `Buffer` at position `x, y`.
         *
         * Notes:
         * - This (primarily) is what 
         *   ```
         *   void Buffer::set(unsigned int, unsigned int, std::string);
         *   ```
         *   is for.
         */


        bool isHappy( const Neighborhood & n,
                      unsigned int x,
                      unsigned int y ) const;
        /**
         * Return `true` if the shape is happy (i.e. not willing to move), and
         * `false` otherwise.
         *
         * - More specifically, return `true` if and only if the shape
         *     - has more than 0 "triangle" or "square" neighbors
         *     - and the ratio of like neighbors to unlike (different)
         *       neighbors is greater than or equal to `RATIO_ALIKE_HAPPY`
         *       (from `constants.h`)
         *     - and the ratio of unlike (different) neighbors to like
         *       neighbors is greater than or equal to `RATIO_DIFFERENT_HAPPY`
         *       (from `constants.h`)
         *
         * Notes:
         * - Use `n.get(...).getType() == "..."` to determine the type of the
         *   `Shape` at a given position.
         * - Be careful not to look for neighbors outside the bounds of the
         *   `Neighborhood`.
         * - Be careful not to have a shape count itself, when trying to count
         *   its neighbors.
         * - Be careful not to count "empty" shapes as unlike (different)
         *   shapes ("empty" shapes should not count as either like or
         *   unlike).
         * - Be careful of possible division by 0 when testing the ratios of
         *   like and unlike shapes.
         */
};

// ----------------------------------------------------------------------------
#endif

